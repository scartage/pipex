  1. Primero se crea un pipe mediante pipe(fd). Esto da dos descriptores de archivo: fd[0] para lectura y fd[1] para escritura.
2. Luego se crea un nuevo proceso con fork(). Esto duplica el proceso actual y devuelve el PID (ID del proceso) del nuevo proceso. El valor 0 se devuelve en el proceso hijo y el PID del hijo se devuelve en el proceso padre.
3. El proceso hijo cierra el extremo de lectura del pipe con close(fd[0]). No necesita este extremo del pipe.
4. El proceso hijo luego redirige su salida estándar (STDOUT) al extremo de escritura del pipe usando dup2(fd[1], STDOUT_FILENO). Esto significa que cualquier cosa que el proceso hijo escriba en su salida estándar (por ejemplo, mediante printf o write) ahora se enviará al pipe.
5. El proceso hijo ejecuta execve para reemplazar su imagen con el comando /bin/ls con la opción -l. El comando se ejecuta y su salida se envía al pipe.
6. Mientras tanto, el proceso padre cierra el extremo de escritura del pipe con close(fd[1]). Luego lee la salida del comando ls -l desde el extremo de lectura del pipe y la escribe en su propia salida estándar.
7. Finalmente, el proceso padre espera a que el proceso hijo termine con wait(NULL).
Este programa es una forma muy básica de cómo una shell podría ejecutar un comando y mostrar su salida, aunque las shells reales son mucho más complejas y manejan muchos más casos y comandos.


The general idea: we read from infile, execute cmd1 with infile as input, send the output to cmd2, which will write to outfile.
pipe() sends the output of the first execve() as input to the second execve(); fork() runs two processes (i.e. two commands) in one single program; dup2() swaps our files with stdin and stdout.
Visually,

// each cmd needs a stdin (input) and returns an output (to stdout)
   
    infile                                             outfile
as stdin for cmd1                                 as stdout for cmd2            
       |                        PIPE                        ↑
       |           |---------------------------|            |
       ↓             |                       |              |
      cmd1   -->    end[1]       ↔       end[0]   -->     cmd2           
                     |                       |
            cmd1   |---------------------------|  end[0]
           output                             reads end[1]
         is written                          and sends cmd1
          to end[1]                          output to cmd2
       (end[1] becomes                      (end[0] becomes 
        cmd1 stdout)                           cmd2 stdin)


